AWSTemplateFormatVersion: 2010-09-09
Description: EC2 and SecurityGroup and ELB Create

Metadata:
  AWS::CloudFormation::InterFace:
    ParameterGroups:
      - Label:
          default: Amazon IAM Configuration
        Parameters:
          - awsExampleManagedPolicyParameterOne
          - awsExampleManagedPolicyParameterTwo
          - awsExampleManagedPolicyParameterThree
      
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - EC2InstanceType
          - EC2Type
    
    ParameterLabels:
      EC2InstanceType:
        default: EC2InstanceType
          
      EC2Type:
        default: EC2Type
          
Mappings:
  RegionMap:
    us-east-1:  #バージニア北部
      EC2Linux2AMI : 'ami-090fa75af13c156b4'  #Amazon Linux2
      EC2WindowsAMI: 'ami-0c95d38b24a19de18'  #Windows Server
    
    ap-northeast-1: #東京
      EC2Linux2AMI : 'ami-0ecb2a61303230c9d'  #Amazon Linux2
      EC2WindowsAMI: 'ami-04ac1ccf3fe61134b'  #Windows Server
    
    ap-northeast-3: #大阪
      EC2Linux2AMI : 'ami-0bfdfe2977c12e24b'  #Amazon Linux2
      EC2WindowsAMI: 'ami-066a9a6535554f532'  #Windows Server

Parameters:
  ProjectName:
    Type: String

  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stag
      - prod
  
  awsExampleManagedPolicyParameterOne:
    Type: String
    Default: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  awsExampleManagedPolicyParameterTwo:
    Type: String
    Default: arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
  
  awsExampleManagedPolicyParameterThree:
    Type: String
    Default: arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  EC2Type:
    Type: String
    Default: Linux2
    AllowedValues:
      - Linux2
      - Windows

  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
      - m5.large
      - m5.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
    
  MyIp:
    Type: String
    Default: 0.0.0.0/0

Conditions:
  EC2Linux: !Equals
    - !Ref EC2Type
    - Linux2
  
  EC2Windows: !Equals
    - !Ref EC2Type
    - Windows

Resources:

#IAM Role Create
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref awsExampleManagedPolicyParameterOne
        - !Ref awsExampleManagedPolicyParameterTwo
        - !Ref awsExampleManagedPolicyParameterThree
      RoleName: !Sub '${ProjectName}-${EnvironmentName}-iam-role-for-ec2'

#IAM InstanceProfile Create
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-${EnvironmentName}-iam-profile'
      Roles:
        - !Ref IAMRole


# EC2 SecurityGroup Create
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ProjectName}-${EnvironmentName}-ec2-sg'
      VpcId: { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-vpc'}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIp
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref MyIp          
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-vpc-cidr'}
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-vpc-cidr'}
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-ec2-sg'

#EC2 KeyPair Create
  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub '${ProjectName}-${EnvironmentName}-key'

# EC2 Linux InstanceA Create
  EC2LinuxInstanceA:
    Type: AWS::EC2::Instance
    Condition: EC2Linux
    Properties:
      ImageId: 
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - EC2Linux2AMI
      KeyName: !Ref EC2KeyPair
      InstanceType: !Ref EC2InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
          SubnetId: { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-public-subnet-a'}
          GroupSet:
            - Ref: EC2SG
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        wget https://download.oracle.com/otn_software/linux/instantclient/19600/oracle-instantclient19.6-basic-19.6.0.0.0-1.x86_64.rpm
        wget https://download.oracle.com/otn_software/linux/instantclient/19600/oracle-instantclient19.6-sqlplus-19.6.0.0.0-1.x86_64.rpm
        yum install -y oracle-instantclient19.6-basic-19.6.0.0.0-1.x86_64.rpm
        yum install -y oracle-instantclient19.6-sqlplus-19.6.0.0.0-1.x86_64.rpm
        yum install -y mysql
        yum install -y postgresql
        sudo amazon-linux-extras install -y  collectd
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-ec2-linux-a'

#EC2 Windows InstanceA Create
  EC2WindowsInstanceA:
    Type: AWS::EC2::Instance
    Condition: EC2Windows
    Properties:
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - EC2WindowsAMI
      KeyName: !Ref EC2KeyPair
      InstanceType: !Ref EC2InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
          SubnetId: {'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-public-subnet-a'}
          GroupSet:
            - !Ref EC2SG
      IamInstanceProfile: !Ref IAMInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-ec2-windows-a'

# EC2 Linux InstanceC Create
  EC2LinuxInstanceC:
    Type: AWS::EC2::Instance
    Condition: EC2Linux
    Properties:
      ImageId: 
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - EC2Linux2AMI
      KeyName: !Ref EC2KeyPair
      InstanceType: !Ref EC2InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
          SubnetId: { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-public-subnet-c'}
          GroupSet:
            - Ref: EC2SG
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        wget https://download.oracle.com/otn_software/linux/instantclient/19600/oracle-instantclient19.6-basic-19.6.0.0.0-1.x86_64.rpm
        wget https://download.oracle.com/otn_software/linux/instantclient/19600/oracle-instantclient19.6-sqlplus-19.6.0.0.0-1.x86_64.rpm
        yum install -y oracle-instantclient19.6-basic-19.6.0.0.0-1.x86_64.rpm
        yum install -y oracle-instantclient19.6-sqlplus-19.6.0.0.0-1.x86_64.rpm
        yum install -y mysql
        yum install -y postgresql
        sudo amazon-linux-extras install -y  collectd
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-ec2-linux-c'

#EC2 Windows InstanceC Create
  EC2WindowsInstanceC:
    Type: AWS::EC2::Instance
    Condition: EC2Windows
    Properties:
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - EC2WindowsAMI
      KeyName: !Ref EC2KeyPair
      InstanceType: !Ref EC2InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
          SubnetId: {'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-public-subnet-a'}
          GroupSet:
            - !Ref EC2SG
      IamInstanceProfile: !Ref IAMInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${EnvironmentName}-ec2-windows-c'

#ALB TargetGroup Linux Create
  ALBTargetGroupLinux:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EC2Linux
    Properties:
      VpcId: { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-vpc'}
      Name: !Sub '${ProjectName}-${EnvironmentName}-alb-linux-tg'
      HealthCheckProtocol: HTTP
      HealthCheckPath: '/'
      HealthCheckPort: 'traffic-port'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 300
        - Key: 'stickiness.type'
          Value: lb_cookie
        - Key: 'stickiness.lb_cookie.duration_seconds'
          Value: 86400
      Targets:
        - Id: !Ref EC2LinuxInstanceA
        - Id: !Ref EC2LinuxInstanceC
          Port: 80

#ALB TargetGroup Windows Create
  ALBTargetGroupWindows:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EC2Windows   
    Properties:
      VpcId: { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-vpc'}
      Name: !Sub '${ProjectName}-${EnvironmentName}-alb-windows-tg'
      HealthCheckProtocol: HTTP
      HealthCheckPath: '/'
      HealthCheckPort: 'traffic-port'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 300
        - Key: 'stickiness.type'
          Value: lb_cookie
        - Key: 'stickiness.lb_cookie.duration_seconds'
          Value: 86400
      Targets:
        - Id: !Ref EC2WindowsInstanceA
        - Id: !Ref EC2WindowsInstanceC
          Port: 80

#ALB Lisner Linux Create
  ALBLisnerLinux:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EC2Linux
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupLinux
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

#ALB Lisner Windows Create
  ALBLisnerWindows:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EC2Windows
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupWindows
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP


#ALB Create
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-alb'
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: false
        - Key: 'idle_timeout.timeout_seconds'
          Value: 60
      Subnets:
        - { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-public-subnet-a'}
        - { 'Fn::ImportValue': !Sub '${ProjectName}-${EnvironmentName}-public-subnet-c'}
      SecurityGroups:
        - !Ref EC2SG

Outputs:

#EC2 Linux InstanceA ID
  EC2LinuxInstanceAID:
    Condition: EC2Linux
    Value: !Ref EC2LinuxInstanceA
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-linux-a'

#EC2 Linux InstanceA PrivateIP
  EC2LinuxInstanceAPrivateIP:
    Condition: EC2Linux
    Value: !GetAtt EC2LinuxInstanceA.PrivateIp
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-linux-a-private-ip'

#EC2 Windows InstanceA ID
  EC2WindowsInstanceAID:
    Condition: EC2Windows
    Value: !Ref EC2WindowsInstanceA
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-windows-a'

#EC2 Windows InstanceA PrivateIP
  EC2WindowsInstanceAPrivateIP:
    Condition: EC2Windows
    Value: !GetAtt EC2WindowsInstanceA.PrivateIp
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-windows-a-private-ip'

#EC2 Linux InstanceC ID
  EC2InstanceCID:
    Condition: EC2Linux
    Value: !Ref EC2LinuxInstanceC
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-linux-c'

#EC2 Linux InstanceC PrivateIP
  EC2LinuxInstanceCPrivateIP:
    Condition: EC2Linux
    Value: !GetAtt EC2LinuxInstanceC.PrivateIp
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-linux-c-private-ip'

#EC2 Windows InstanceC ID
  EC2WindowsInstanceCID:
    Condition: EC2Windows
    Value: !Ref EC2WindowsInstanceC
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-windows-c'

#EC2 Windows InstanceC PrivateIP
  EC2WindowsInstanceCPrivateIP:
    Condition: EC2Windows
    Value: !GetAtt EC2WindowsInstanceC.PrivateIp
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-ec2-windows-c-private-ip'

#ALB DNS Name
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-alb-endpoint'
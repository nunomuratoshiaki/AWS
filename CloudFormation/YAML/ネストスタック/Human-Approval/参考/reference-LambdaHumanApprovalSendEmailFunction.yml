AWSTemplateFormatVersion: 2010-09-09
Description: Lambda Send Email

Parameters:
  SNS:
    Type: String

Resources:

# Lambda Create
  LambdaHumanApprovalSendEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaSendEmailExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 25
      Code:
        ZipFile:
          Fn::Sub: |
            console.log("Loading function");
            const AWS = require("aws-sdk");
            exports.lambda_handler = (event, context, callback) => {
              console.log("event= " + JSON.stringify(event));
              console.log("context= " + JSON.stringify(context));

              const executionContext = event.ExecutionContext;
              console.log("executionContext= " + executionContext);

              const executionName = executionContext.Execution.Name;
              console.log("executionName= " + executionName);

              const statemachineName = executionContext.StateMachine.Name;
              console.log("statemachineName= " + statemachineName);

              const taskToken = executionContext.Task.Token;
              console.log("taskToken= " + taskToken);

              const apigwEndpint = event.APIGatewayEndpoint;
              console.log("apigwEndpint = " + apigwEndpint)
              
              const approveEndpoint = apigwEndpint + "/execution?action=approve&ex=" + executionName + "&sm=" + statemachineName + "&taskToken=" + encodeURIComponent(taskToken);
              console.log("approveEndpoint= " + approveEndpoint);

              const rejectEndpoint = apigwEndpint + "/execution?action=reject&ex=" + executionName + "&sm=" + statemachineName + "&taskToken=" + encodeURIComponent(taskToken);
              console.log("rejectEndpoint= " + rejectEndpoint);

              const emailSnsTopic = "${SNS}";
              console.log("emailSnsTopic= " + emailSnsTopic);

              var emailMessage = "Welcome! \n\n";
              emailMessage += "This is an email requiring an approval for a step functions execution. \n\n"
              emailMessage += 'Please check the following information and click "Approve" link if you want to approve. \n\n'
              emailMessage += "Execution Name -> " + executionName + "\n\n"
              emailMessage += "Approve " + approveEndpoint + "\n\n"
              emailMessage += "Reject " + rejectEndpoint + "\n\n"
              emailMessage += "Thanks for using Step functions!"

              const sns =new AWS.SNS();
              var params = {
                Message: emailMessage,
                Subject: "Required approval from AWS Step Functions",
                TopicArn: emailSnsTopic
              };

              sns.publish(params)
                .promise()
                .then(function(data) {
                  console.log("MessageID is " + data.MessageId);
                  callback(null);
                }).catch(
                  function(err) {
                    console.error(err, err.stack);
                    callback(err);
                  });
            }

#IAM Role Create
  LambdaSendEmailExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
        - PolicyName: SNSSendEmailPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'SNS:Publish'
                Resource: 
                  - !Sub '${SNS}'

Outputs:
  LambdaSendEmail:
    Value: !GetAtt LambdaHumanApprovalSendEmailFunction.Arn
    Export:
      Name: LambdaHumanApprovalSendEmailFunction

AWSTemplateFormatVersion: 2010-09-09
Description: API Gateway Create

Parameters:
  LambdaApprovalFunction:
    Type: String

  RestAPI:
    Type: String

  Resource:
    Type: String

Resources:

#API Gateway Method Create
  Method:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration: 
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApprovalFunction}/invocations'
        IntegrationResponses:
          - StatusCode: 302
            ResponseParameters:
              method.response.header.Location: 'integration.response.body.headers.Location'
        RequestTemplates:
          application/json: |
            {
              "body" : $input.json("$"),
              "headers" : {
                #foreach($header in $input.params().header.keySet())
                "$header" : "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end
                
                #end
              },
              "method" : "$context.httpMethod",
              "params" : {
                #foreach($param in $input.params().path.keySet())
                "$param" : "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                
                #end
              },
              "query" : {
                #foreach($queryParam in $input.params().querystring.keySet())
                "$queryParam" : "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end
                
                #end
              }
            }
      ResourceId: !Ref Resource
      RestApiId: !Ref RestAPI
      MethodResponses:
        - StatusCode: 302
          ResponseParameters:
            method.response.header.Location: true

# API Gateway Account Create
  Account:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt 'APIGatewayCloudWatchLogsRole.Arn'

#API Gateway Stage Create
  Stage:
    DependsOn:
      - Account
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref RestAPI
      StageName: states

#API Gateway Deployment Create
  Deployment:
    DependsOn:
      - Method
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestAPI
      StageName: DummyStage

#IAM Role Create
  APIGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: APIGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'

Outputs:

  APIGatewayInvokeURL:
    Value: !Sub 'https://${RestAPI}.exeute-api.${AWS::Region}.amazonaws.com/states'
    Export:
      Name: APIGatewayInvokeURL
AWSTemplateFormatVersion: 2010-09-09
Description: Lambda that will be invoked by API Gateway

Parameters:
  Email:
    Type: String
    AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    ConstraintDescription: Must be a vaild email address.

  RestAPI:
    Type: String

Resources:

#Lambda Create
  LambdaApprovalFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that callback to AWS Step Functions
      FunctionName: LambdaApprrovalFunction
      Handler: index.handler
      Role: !GetAtt LambdaAPIGatewayIAMRole.Arn
      Runtime: nodejs12.x
      Code:
        ZipFile:
          Fn::Sub: |
            const AWS =require("aws-sdk");
            var redirectToStepFunctions = function(lambdaArn, statemachineName, executionName, callback) {
              const lambdaArnTokens = lambdaArn.split(":");
              const partition = lambdaArnTokens[1];
              const region = lambdaArnTokens[3];
              const accountId = lambdaArnTokens[4];

              console.log("partition=" + partition);
              console.log("region=" + region);
              console.log("accountId=" + accountId);

              const executionArn = "arn:" + partition + ":states:" + region + ":" + accountId + ":execution:" + statemachineName + ":" + executionName;
              console.log("executionArn=" + executionArn);

              const url = "https://console.aws.amazon.com/states/home?region=" + region + "#/executions/details/" + executionArn;
              callback(null, {
                statusCode: 302,
                headers: {
                  Location: url
                }
              });
            };

            exports.handler = (event, context, callback) => {
              console.log("Event= " + JSON.stringify(event));
              const action = event.query.action;
              const taskToken = event.query.taskToken;
              const statemachineName = event.query.sm;
              const executionName = event.query.ex;

              const stepfunctions = new AWS.StepFunctions();

              var message = "";

              if(action === "approve") {
                message = { "Status" : "Approved! Task approved by ${Email}" };
              } else if(action === "reject") {
                message = { "Status" : "Rejected! Task rejected by ${Email}" };
              } else{
                console.error("Unrecognized action. Expected: approve, reject.");
                callback({"Status": "Failed to process the request. Unrecognized Action."});
              }

              stepfunctions.sendTaskSuccess({
                output: JSON.stringify(message),
                taskToken: event.query.taskToken
              })
              .promise()
              .then(function(data) {
                redirectToStepFunctions(context.invokedFunctionArn, statemachineName, executionName, callback);
              }).catch(function(err) {
                console.error(err, err.stack);
                callback(err);
              });
            }

#Lambda Permission Create
  LambdaAPIGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 'LambdaApprovalFunction.Arn'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*'

#IAM Role Create
  LambdaAPIGatewayIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'states:SendTaskFailure'
                  - 'states:SendTaskSuccess'
                Resource: '*' 

Outputs:
  LambdaApproval:
    Value: !GetAtt LambdaApprovalFunction.Arn
    Export:
      Name: LambdaApprovalFunction
